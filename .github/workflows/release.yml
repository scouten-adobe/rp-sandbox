name: Release-plz

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release-plz:
    name: Release-plz
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PLZ_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install fork of release-plz
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: release-plz
          git: https://github.com/scouten-adobe/release-plz.git
          rev: 817bff9abaeb2d8df866a01f62bfe0de04b082fc

      - name: Install binaries
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks@0.34

      - name: Run release-plz
        run: |
          export GITHUB_TOKEN=GH_TOKEN
          
          if [ -z "${GITHUB_TOKEN+x}" ]; then
            echo "Error: environment variable GITHUB_TOKEN is undefined"
            exit 1
          fi

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: environment variable GITHUB_TOKEN is empty"
            exit 1
          fi

          # The environment variable GITHUB_TOKEN is read by the `gh` cli
          VIEWER_JSON=$(gh api graphql -f query='query { viewer { name login databaseId }}' --jq '.data.viewer')
          VIEWER_NAME=$(jq --raw-output '.name | values' <<< "${VIEWER_JSON}")
          VIEWER_LOGIN=$(jq --raw-output '.login' <<< "${VIEWER_JSON}")
          VIEWER_DATABASE_ID=$(jq --raw-output '.databaseId' <<< "${VIEWER_JSON}")

          # Set the variable USER_NAME to the value of VIEWER_NAME if VIEWER_NAME is set and not null.
          # Otherwise, set USER_NAME to the value of VIEWER_LOGIN.
          USER_NAME="${VIEWER_NAME:-${VIEWER_LOGIN}}"
          USER_EMAIL="${VIEWER_DATABASE_ID}+${VIEWER_LOGIN}@users.noreply.github.com"

          git config --global user.name "${USER_NAME}"
          git config --global user.email "${USER_EMAIL}"

          echo "name=${USER_NAME}" >> "${GITHUB_OUTPUT}"
          echo "email=${USER_EMAIL}" >> "${GITHUB_OUTPUT}"

          echo "-- Running release-plz release-pr --"
          release_pr_output=$(release-plz release-pr\
              --git-token ${GH_TOKEN}\
              --repo-url https://github.com/${GITHUB_REPOSITORY}\
              -o json)
          echo "release_pr_output: $release_pr_output"
          prs=$(echo $release_pr_output | jq -c .prs)
          echo "prs=$prs" >> "$GITHUB_OUTPUT"
          prs_length=$(echo "$prs" | jq 'length')
          if [ "$prs_length" != "0" ]; then
              prs_created=true
              first_pr=$(echo $prs | jq -c .[0])
          else
              prs_created=false
              first_pr="{}"
          fi
          echo "pr=$first_pr" >> "$GITHUB_OUTPUT"
          echo "prs_created=$prs_created" >> "$GITHUB_OUTPUT"

          echo "-- Running release-plz release --"
            release_output=$(release-plz release\
                --git-token ${GH_TOKEN}\
                --token ${TOKEN}\
                -o json)
            echo "release_output: $release_output"
            releases=$(echo $release_output | jq -c .releases)
            echo "releases=$releases" >> "$GITHUB_OUTPUT"
            releases_length=$(echo "$releases" | jq 'length')
            if [ "$releases_length" != "0" ]; then
                releases_created=true
            else
                releases_created=false
            fi
            echo "releases_created=$releases_created" >> "$GITHUB_OUTPUT"
        env:
          TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
          GH_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
  
      # (Replace above with this when/if
      # https://github.com/MarcoIeni/release-plz/pull/1657
      # is merged.)
      # - name: Run release-plz
      #   uses: MarcoIeni/release-plz-action@v0.5
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
